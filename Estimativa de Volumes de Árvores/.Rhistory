factor(predicoes.rf, levels = 1:148),
factor(test$VOL, levels = 1:148)
)
volumes
volumes<-read.csv('Volumes.csv', sep=";", dec=",")
volumes
volumes<-read.csv('Volumes.csv', sep=",", dec=";")
volumes
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
rf <- train(VOL~., data=training, method="rf")
volumes<-read.csv('Volumes.csv', sep=",", dec=".")
volumes
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
rf <- train(VOL~., data=training, method="rf")
volumes<-read.csv('Volumes.csv', sep=",", dec=",")
volumes
volumes<-read.csv('Volumes.csv')
volumes
volumes<-read.csv('Volumes.csv', sep=",", dec=",")
volumes
createDataPartition(volumes$VOL, p=0.80, list=FALSE)
volumes
volumes<-read.csv('Volumes.csv', sep=",", dec=".")
volumes
volumes<-read.csv('Volumes.csv', sep=",")
volumes
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
volumes<-read.csv('Volumes.csv', dec=",")
volumes
volumes<-read.csv('Volumes.csv', dec=",")
volumes
volumes<-read.csv('Volumes.csv', dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
confusionMatrix(predicoes.rf, as.factor(test$VOL))
confusionMatrix(predicoes.rf, test$VOL)
rf <- train(VOL~., data=training, method="rf")
rf <- train(VOL~., data=training, method="rf",trControl = ctrl,metric = "Kappa",ntree = 1000,tuneGrid = mtryGrid,importance = TRUE)
rf <- train(VOL~., data=training, method="rf",ntree = 1000,tuneGrid = mtryGrid,importance = TRUE)
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
confusionMatrix(predicoes.rf, test$VOL))
confusionMatrix(predicoes.rf, test$VOL)
confusionMatrix(predicoes.rf, as.factor(test$VOL))
predicoes.rf
test$VOL
as.factor(test$VOL)
confusionMatrix(table(predicoes.rf, as.factor(test$VOL)))
confusionMatrix(table(predicoes.rf, as.factor(test$VOL)))
as.factor(test$VOL)
na.omit(as.factor(test$VOL))
predicoes.rf
na.omit(predicoes.rf)
test$VOL
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
##Confusion Matrix RandomForest
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
predicoes.rf
test$VOL
confusionMatrix(predicoes.rf, test$VOL)
test$VOL[1]
test$VOL[2]
predicoes.rf
test$VOL[2]
test$VOL
confusionMatrix(predicoes.rf, test$VOL)
levels(test$VOL)
levels(predicoes.rf)
levels
levelss<-levels(predicoes.rf)
levelss
volumes<-read.csv('Volumes.csv', header = TRUE,sep=";")
volumes
volumes<-read.csv('Volumes.csv', header = TRUE,sep=",")
volumes
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
rf <- train(VOL~., data=training, method="rf")
test
volumes<-read.csv('Volumes.csv', dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
test
test$VOL
rf
predicoes.rf
volumes<-read.csv('Volumes.csv', dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index]
test <- volumes[-volumes_index]
test
volumes<-read.csv('Volumes.csv', dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
test
predicoes.rf
test$VOL
volumes<-read.csv('Volumes.csv', dec=",")
set.seed(7)
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
confusionMatrix(predicoes.rf, test$VOL)
volumes<-read.csv('Volumes.csv', sep=",")
set.seed(10)
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
volumes<-read.csv('Volumes.csv', sep="," ,dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
test
test$VOL
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
predicoes.rf
confusionMatrix(predicoes.rf, test$VOL))
confusionMatrix(predicoes.rf, test$VOL)
as.factor(predicoes.rf)
test$VOL
as.factor(test$VOL)
confusionMatrix(as.factor(predicoes.rf), test$VOL)
confusionMatrix(as.factor(predicoes.rf), as.factor(test$VOL))
factor(predicoes.rf)
test$VOL
factor(test$VOL)
predicoes.rf
factor(test$VOL)
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
predicoes.rf
confusionMatrix(predicoes.rf, factor(test$VOL)
confusionMatrix(predicoes.rf, factor(test$VOL))
confusionMatrix(predicoes.rf, as.factor(test$VOL))
volumes<-read.csv('Volumes.csv', sep="," ,dec=",")
volumes
volumes<-read.csv('Volumes.csv', sep="," ,dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
rf <- train(VOL~., data=training, method="rf")
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
predicoes.rf
confusionMatrix(predicoes.rf, test$VOL)
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
confusionMatrix(predicoes.rf, test$VOL)
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
confusionMatrix(predicoes.rf, test$VOL)
predicoes.rf
test$VOL
volumes<-read.csv('Volumes.csv', sep="," ,dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
install.packages("mlbench")
install.packages("randomForest")
install.packages("caret")
library("caret")
library("mlbench")
library("randomForest")
install.packages("caret")
install.packages("caret")
library("caret")
library("mlbench")
library("randomForest")
volumes<-read.csv('Volumes.csv', sep="," ,dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
svm <- train(VOL~., data=training, method="svmRadial")
predicoes.svm <- predict(svm, test)
rna <- train(VOL~., data=training, method="nnet")
predicoes.rna <- predict(rna, test)
alom <- nls(VOL ~ b0 + b1*DAP*DAP*HT, dados, start=list(b0=0.5, b1=0.5))
alom <- nls(VOL ~ b0 + b1*DAP*DAP*HT, data=training, start=list(b0=0.5, b1=0.5))
predicoes.alom <- predict(alom, test)
rmse.rf <- RMSE(predicoes.rf, test$VOL)
rmse.svm <- RMSE(predicoes.svm, test$VOL)
rmse.rna <- RMSE(predicoes.rna, test$VOL)
rmse.alom <- RMSE(predicoes.alom, test$VOL)
##Predict RandomForest
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
rmse.rf <- RMSE(predicoes.rf, test$VOL)
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE SVM: ", rmse.rf, "\n")
cat("RMSE RNA: ", rmse.rf, "\n")
cat("RMSE ALOM: ", rmse.rf, "\n")
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE SVM: ", rmse.svm, "\n")
cat("RMSE RNA: ", rmse.rna, "\n")
cat("RMSE ALOM: ", rmse.alom, "\n")
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE SVM: ", rmse.svm, "\n")
cat("RMSE RNA: ", rmse.rna, "\n")
cat("RMSE ALOM: ", rmse.alom, "\n")
rf <- train(VOL~., data=training, method="rf")
install.packages("mlbench")
install.packages("randomForest")
install.packages("caret")
library("caret")
library("mlbench")
library("randomForest")
volumes<-read.csv('Volumes.csv', sep="," ,dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
svm <- train(VOL~., data=training, method="svmRadial")
predicoes.svm <- predict(svm, test)
rna <- train(VOL~., data=training, method="nnet")
predicoes.rna <- predict(rna, test)
alom <- nls(VOL ~ b0 + b1*DAP*DAP*HT, data=training, start=list(b0=0.5, b1=0.5))
predicoes.alom <- predict(alom, test)*/
alom <- nls(VOL ~ b0 + b1*DAP*DAP*HT, data=training, start=list(b0=0.5, b1=0.5))
predicoes.alom <- predict(alom, test)
rmse.rf <- RMSE(predicoes.rf, test$VOL)
rmse.svm <- RMSE(predicoes.svm, test$VOL)
rmse.rna <- RMSE(predicoes.rna, test$VOL)
rmse.alom <- RMSE(predicoes.alom, test$VOL)
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE SVM: ", rmse.svm, "\n")
cat("RMSE RNA: ", rmse.rna, "\n")
cat("RMSE ALOM: ", rmse.alom, "\n")
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE SVM: ", rmse.svm, "\n")
cat("RMSE RNA: ", rmse.rna, "\n")
cat("RMSE ALOM: ", rmse.alom, "\n")
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE SVM: ", rmse.svm, "\n")
cat("RMSE RNA: ", rmse.rna, "\n")
cat("RMSE ALOM: ", rmse.alom, "\n")
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE SVM: ", rmse.svm, "\n")
cat("RMSE RNA: ", rmse.rna, "\n")
cat("RMSE ALOM: ", rmse.alom, "\n")
coeficiente_determinacao <- function(predicoes.rf,svm){
return(1- sum((predicoes.rf - svm) ^ 2)/sum((svm - mean(svm))^2))
}
coeficiente_determinacao <- function(predicoes.rf,svm){
return(1- sum((predicoes.rf - svm) ^ 2)/sum((svm - mean(svm))^2))
}
coeficiente_determinacao
predicoes.rf
svm
test$VOL
rmse.rf
coeficiente_determinacao <- function(predicoes.rmse.rf){
return(1- sum((predicoes.rf - svm) ^ 2)/sum((svm - mean(svm))^2))
}
svm
coeficiente_determinacao <- function(predicoes.rf, svm){
return 1
coeficiente_determinacao
alom
predicoes.alom
data=training
predict(alom, test)
test
alom
test
training
predicted
predicted <- unname(predicoes.rf)
predicted
predicoes.rf
actual <- volumes$VOL
predicted <- unname(predicoes.rf)
teste <- (1- sum((predicoes.rf - actual) ^ 2)/sum((actual - mean(actual))^2))
teste
coeficiente_determinacao <- function(predict, actual){
return(1- sum((predict - actual) ^ 2)/sum((actual - mean(actual))^2))
}
coeficiente_determinacao_rf = coeficiente_determinacao(predicoes.rf, volumes$VOL)
coeficiente_determinacao_rf
coeficiente_determinacao_rf = coeficiente_determinacao(predicoes.rf, volumes$VOL)
coeficiente_determinacao_rf
coeficiente_determinacao_svm = coeficiente_determinacao(predicoes.svm, volumes$VOL)
coeficiente_determinacao_svm
coeficiente_determinacao_rna = coeficiente_determinacao(predicoes.rna, volumes$VOL)
coeficiente_determinacao_rna
coeficiente_determinacao_alom = coeficiente_determinacao(predicoes.alom, volumes$VOL)
coeficiente_determinacao_rna
coeficiente_determinacao_rf = coeficiente_determinacao(predicoes.rf, volumes$VOL)
coeficiente_determinacao_rf
coeficiente_determinacao_svm = coeficiente_determinacao(predicoes.svm, volumes$VOL)
coeficiente_determinacao_svm
coeficiente_determinacao_rna = coeficiente_determinacao(predicoes.rna, volumes$VOL)
coeficiente_determinacao_rna
coeficiente_determinacao_alom = coeficiente_determinacao(predicoes.alom, volumes$VOL)
coeficiente_determinacao_alom
coeficiente_determinacao_rf = coeficiente_determinacao(predicoes.rf, volumes$VOL)
coeficiente_determinacao_rf
coeficiente_determinacao_svm = coeficiente_determinacao(predicoes.svm, volumes$VOL)
coeficiente_determinacao_svm
coeficiente_determinacao_rna = coeficiente_determinacao(predicoes.rna, volumes$VOL)
coeficiente_determinacao_rna
coeficiente_determinacao_alom = coeficiente_determinacao(predicoes.alom, volumes$VOL)
coeficiente_determinacao_alom
help(RMSE)
cat("RMSE RF: ", rmse.rf, "\n")
sqrt(sum(rmse.rf - volumes$VOL)^2)
sqrt(sum(predicoes.rf - volumes$VOL)^2)
cat("RMSE RF: ", rmse.rf, "\n")
teste<-sqrt(mean((volumes$VOL - rmse.rf)^2))
teste<-sqrt(mean((volumes$VOL - rmse.rf)^2))
teste<-sqrt(mean((volumes$VOL - rmse.rf)^2))
teste
cat("RMSE RF: ", rmse.rf, "\n")
teste<-sqrt(mean((volumes$VOL - predicoes.rf)^2))
teste
cat("RMSE RF: ", rmse.rf, "\n")
teste<-sqrt(mean((volumes$VOL - predicoes.rf)^2))
teste
rmse.rf
teste
RMSE(predicoes.rf, test$VOL)
teste<-sqrt(mean((predicoes.rf - volumes$VOL)^2))
teste
teste<-sqrt(mean((predicoes.rf - test$VOL)^2))
teste
cat("RMSE RF: ", rmse.rf, "\n")
teste<-sqrt(mean((predicoes.rf - test$VOL)^2))
teste
padrao_estimativa_rf(predicoes.svm, test$VOL)
padrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predicoes.rf - test$VOL)^2)/(length(test$VOL-2))))
}
lenght(predicoes.rf)
teste = padrao_estimativa(predicoes.rf, volumes$VOL)
padrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predict - actual)^2)/(2)))
}
padrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predict - actual)^2)/(2))))
}
teste = padrao_estimativa(predicoes.rf, volumes$VOL)
padrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predict - actual)^2)/(2))))
}
teste = padrao_estimativa(predicoes.rf, volumes$VOL)
teste
predicoes.rf
test$VOL
padrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predict - actual)^2)/(actual-2))))
}
padrao_estimativa_rf = padrao_estimativa(predicoes.rf, volumes$VOL)
padrao_estimativa_rf
padrao_estimativa_svm = padrao_estimativa(predicoes.smv, volumes$VOL)
padrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predict - actual)^2)/(actual-2))))
}
padrao_estimativa_rf = padrao_estimativa(predicoes.rf, volumes$VOL)
padrao_estimativa_rf
padrao_estimativa_svm = padrao_estimativa(predicoes.svm, volumes$VOL)
padrao_estimativa_svm
padrao_estimativa_rna = padrao_estimativa(predicoes.rna, volumes$VOL)
padrao_estimativa_rna
padrao_estimativa_alom = padrao_estimativa(predicoes.alom, volumes$VOL)
padrao_estimativa_alom
length(volumes$VOL)
padrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predict - actual)^2)/(length(actual)-2))))
}
padrao_estimativa_rf = padrao_estimativa(predicoes.rf, volumes$VOL)
padrao_estimativa_rf
padrao_estimativa_svm = padrao_estimativa(predicoes.svm, volumes$VOL)
padrao_estimativa_svm
padrao_estimativa_rna = padrao_estimativa(predicoes.rna, volumes$VOL)
padrao_estimativa_rna
padrao_estimativa_alom = padrao_estimativa(predicoes.alom, volumes$VOL)
padrao_estimativa_alom
coeficiente_determinacao <- function(predict, actual){
return(1- sum((predict - actual) ^ 2)/sum((actual - mean(actual))^2))
}
coeficiente_determinacao_rf = coeficiente_determinacao(predicoes.rf, volumes$VOL)
coeficiente_determinacao_rf
coeficiente_determinacao_svm = coeficiente_determinacao(predicoes.svm, volumes$VOL)
coeficiente_determinacao_svm
coeficiente_determinacao_rna = coeficiente_determinacao(predicoes.rna, volumes$VOL)
coeficiente_determinacao_rna
coeficiente_determinacao_alom = coeficiente_determinacao(predicoes.alom, volumes$VOL)
coeficiente_determinacao_alom
adrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predict - actual)^2)/(length(actual)-2))))
}
padrao_estimativa_rf = padrao_estimativa(predicoes.rf, volumes$VOL)
padrao_estimativa_rf
padrao_estimativa_svm = padrao_estimativa(predicoes.svm, volumes$VOL)
padrao_estimativa_svm
padrao_estimativa_rna = padrao_estimativa(predicoes.rna, volumes$VOL)
padrao_estimativa_rna
padrao_estimativa_alom = padrao_estimativa(predicoes.alom, volumes$VOL)
padrao_estimativa_alom
syx <- function(padrao_estimativa, actual) {
return (padrao_estimativa/length(actual))
}
syx_rf = syx(predicoes.rf, volumes$VOL)
syx_rf
syx <- function(padrao_estimativa, actual) {
return (padrao_estimativa/length(actual))
}
syx_rf = syx(padrao_estimativa_rf, volumes$VOL)
syx_rf
syx <- function(padrao_estimativa, actual) {
return (padrao_estimativa/length(actual) * 100)
}
syx_rf = syx(padrao_estimativa_rf, volumes$VOL)
syx_rf
syx <- function(padrao_estimativa, actual) {
return (padrao_estimativa/length(actual) * 100)
}
syx_rf = syx(padrao_estimativa_rf, volumes$VOL)
syx_rf
syx_svm = syx(padrao_estimativa_svm, volumes$VOL)
syx_svm
syx_rna = syx(padrao_estimativa_rna, volumes$VOL)
syx_rna
syx_alom = syx(padrao_estimativa_alom, volumes$VOL)
syx_alom
library("caret")
library("mlbench")
library("randomForest")
volumes<-read.csv('Volumes.csv', sep="," ,dec=",")
volumes_index <- createDataPartition(volumes$VOL, p=0.80, list=FALSE)
training <- volumes[volumes_index,]
test <- volumes[-volumes_index,]
set.seed(7)
rf <- train(VOL~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
svm <- train(VOL~., data=training, method="svmRadial")
predicoes.svm <- predict(svm, test)
rna <- train(VOL~., data=training, method="nnet")
predicoes.rna <- predict(rna, test)
alom <- nls(VOL ~ b0 + b1*DAP*DAP*HT, data=training, start=list(b0=0.5, b1=0.5))
predicoes.alom <- predict(alom, test)
rmse.rf <- RMSE(predicoes.rf, test$VOL)
rmse.svm <- RMSE(predicoes.svm, test$VOL)
rmse.rna <- RMSE(predicoes.rna, test$VOL)
rmse.alom <- RMSE(predicoes.alom, test$VOL)
cat("RMSE RF: ", rmse.rf, "\n")
cat("RMSE SVM: ", rmse.svm, "\n")
cat("RMSE RNA: ", rmse.rna, "\n")
cat("RMSE ALOM: ", rmse.alom, "\n")
coeficiente_determinacao <- function(predict, actual){
return(1- sum((predict - actual) ^ 2)/sum((actual - mean(actual))^2))
}
coeficiente_determinacao_rf = coeficiente_determinacao(predicoes.rf, volumes$VOL)
coeficiente_determinacao_rf
coeficiente_determinacao_svm = coeficiente_determinacao(predicoes.svm, volumes$VOL)
coeficiente_determinacao_svm
coeficiente_determinacao_rna = coeficiente_determinacao(predicoes.rna, volumes$VOL)
coeficiente_determinacao_rna
coeficiente_determinacao_alom = coeficiente_determinacao(predicoes.alom, volumes$VOL)
coeficiente_determinacao_alom
padrao_estimativa <- function(predict, actual){
return(sqrt(mean(((predict - actual)^2)/(length(actual)-2))))
}
padrao_estimativa_rf = padrao_estimativa(predicoes.rf, volumes$VOL)
padrao_estimativa_rf
padrao_estimativa_svm = padrao_estimativa(predicoes.svm, volumes$VOL)
padrao_estimativa_svm
padrao_estimativa_rna = padrao_estimativa(predicoes.rna, volumes$VOL)
padrao_estimativa_rna
padrao_estimativa_alom = padrao_estimativa(predicoes.alom, volumes$VOL)
padrao_estimativa_alom
syx <- function(padrao_estimativa, actual) {
return (padrao_estimativa/mean(actual) * 100)
}
syx_rf = syx(padrao_estimativa_rf, volumes$VOL)
syx_rf
syx_svm = syx(padrao_estimativa_svm, volumes$VOL)
syx_svm
syx_rna = syx(padrao_estimativa_rna, volumes$VOL)
syx_rna
syx_alom = syx(padrao_estimativa_alom, volumes$VOL)
syx_alom
